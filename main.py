import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from init_db import init_database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7877054403:AAEl3brZHLAExXFr2PXq9sfVxPR82_scZBI'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('college_info.db', check_same_thread=False)
cursor = conn.cursor()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [7940750902]


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    waiting_for_news_title = State()
    waiting_for_news_content = State()
    waiting_for_news_image = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    waiting_for_schedule_group = State()
    waiting_for_schedule_day = State()
    waiting_for_schedule_lessons = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    waiting_for_event_title = State()
    waiting_for_event_description = State()
    waiting_for_event_date = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    waiting_for_contact_department = State()
    waiting_for_contact_name = State()
    waiting_for_contact_phone = State()
    waiting_for_contact_email = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserStates(StatesGroup):
    waiting_for_group = State()
    waiting_for_feedback = State()
    waiting_for_feedback_text = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì∞ –ù–æ–≤–æ—Å—Ç–∏")
    keyboard.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    keyboard.add("üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    return keyboard

def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
    keyboard.add("üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    keyboard.add("üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    keyboard.add("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    keyboard.add("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏")
    keyboard.add("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    return keyboard

def delete_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
    keyboard.add("–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    keyboard.add("–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    keyboard.add("–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    keyboard.add("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ò–∂–µ–≤—Å–∫–æ–≥–æ —Ç–µ—Ö–Ω–∏–∫—É–º–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_keyboard()
    )

@dp.message_handler(commands=['admin'])
async def admin_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=admin_keyboard()
        )
    else:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(lambda message: message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def show_news(message: types.Message):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    cursor.execute('SELECT title, content, date, image_url FROM news ORDER BY date DESC LIMIT 5')
    news = cursor.fetchall()
    if news:
        for title, content, date, image_url in news:
            if image_url:
                caption = f"üìÖ {date}\nüìå {title}\n\n{content}"
                try:
                    await message.answer_photo(photo=image_url, caption=caption)
                except Exception:
                    await message.answer(f"üìÖ {date}\nüìå {title}\n\n{content}")
            else:
                await message.answer(f"üìÖ {date}\nüìå {title}\n\n{content}")
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")

@dp.message_handler(lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule_groups(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    cursor.execute('SELECT DISTINCT group_name FROM schedule')
    groups = cursor.fetchall()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in groups:
        keyboard.add(group[0])
    keyboard.add("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
    await UserStates.waiting_for_group.set()

@dp.message_handler(state=UserStates.waiting_for_group)
async def show_schedule(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        return

    cursor.execute('SELECT day, lessons FROM schedule WHERE group_name = ? ORDER BY day', (message.text,))
    schedule = cursor.fetchall()
    if schedule:
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {message.text}:\n\n"
        for day, lessons in schedule:
            response += f"üìå {day}:\n{lessons}\n\n"
        await message.answer(response, reply_markup=get_main_keyboard())
    else:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await state.finish()

@dp.message_handler(lambda message: message.text == "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_events(message: types.Message):
    """–ü–æ–∫–∞–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    cursor.execute('SELECT title, description, date FROM events WHERE date >= date("now") ORDER BY date')
    events = cursor.fetchall()
    if events:
        response = "üéâ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for title, description, date in events:
            response += f"üìÖ {date}\nüìå {title}\n{description}\n\n"
        await message.answer(response)
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")

@dp.message_handler(lambda message: message.text == "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    cursor.execute('SELECT department, name, phone, email FROM contacts')
    contacts = cursor.fetchall()
    if contacts:
        response = "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        for department, name, phone, email in contacts:
            response += f"üìå {department}\nüë§ {name}\nüìû {phone}\nüìß {email}\n\n"
        await message.answer(response)
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.")

@dp.message_handler(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def feedback_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞"""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ!"
    )
    await UserStates.waiting_for_feedback_text.set()

@dp.message_handler(state=UserStates.waiting_for_feedback_text)
async def process_feedback(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        'INSERT INTO feedback (user_id, username, text, date) VALUES (?, ?, ?, ?)',
        (user_id, username, message.text, date)
    )
    conn.commit()
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            admin_info = (
                f"üì¨ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n"
                f"–û—Ç: @{username}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
            )
            await bot.send_message(admin_id, admin_info)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º
            await message.forward(admin_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ.",
        reply_markup=get_main_keyboard()
    )
    await state.finish()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(lambda message: message.text == "üì∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def add_news_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
        await AdminStates.waiting_for_news_title.set()

@dp.message_handler(state=AdminStates.waiting_for_news_title)
async def process_news_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    async with state.proxy() as data:
        data['title'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
    await AdminStates.waiting_for_news_content.set()

@dp.message_handler(state=AdminStates.waiting_for_news_content)
async def process_news_content(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    async with state.proxy() as data:
        data['content'] = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await AdminStates.waiting_for_news_image.set()

@dp.message_handler(commands=['skip'], state=AdminStates.waiting_for_news_image)
@dp.message_handler(content_types=['photo'], state=AdminStates.waiting_for_news_image)
async def process_news_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    async with state.proxy() as data:
        if message.photo:
            photo = message.photo[-1]
            data['image_url'] = photo.file_id
        else:
            data['image_url'] = None
        
        cursor.execute(
            'INSERT INTO news (title, content, date, image_url) VALUES (?, ?, ?, ?)',
            (data['title'], data['content'], datetime.now().strftime("%Y-%m-%d"), data['image_url'])
        )
        conn.commit()
        
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    await state.finish()

@dp.message_handler(lambda message: message.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def add_schedule_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–°-101'):")
        await AdminStates.waiting_for_schedule_group.set()

@dp.message_handler(state=AdminStates.waiting_for_schedule_group)
async def process_schedule_group(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    async with state.proxy() as data:
        data['group_name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:")
    await AdminStates.waiting_for_schedule_day.set()

@dp.message_handler(state=AdminStates.waiting_for_schedule_day)
async def process_schedule_day(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    async with state.proxy() as data:
        data['day'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:")
    await AdminStates.waiting_for_schedule_lessons.set()

@dp.message_handler(state=AdminStates.waiting_for_schedule_lessons)
async def process_schedule_lessons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    async with state.proxy() as data:
        cursor.execute(
            'INSERT INTO schedule (group_name, day, lessons) VALUES (?, ?, ?)',
            (data['group_name'], data['day'], message.text)
        )
        conn.commit()
    
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=admin_keyboard())
    await state.finish()

@dp.message_handler(lambda message: message.text == "üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def add_event_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        await AdminStates.waiting_for_event_title.set()

@dp.message_handler(state=AdminStates.waiting_for_event_title)
async def process_event_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        data['title'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await AdminStates.waiting_for_event_description.set()

@dp.message_handler(state=AdminStates.waiting_for_event_description)
async def process_event_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        data['description'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î):")
    await AdminStates.waiting_for_event_date.set()

@dp.message_handler(state=AdminStates.waiting_for_event_date)
async def process_event_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    async with state.proxy() as data:
        try:
            datetime.strptime(message.text, "%Y-%m-%d")
            cursor.execute(
                'INSERT INTO events (title, description, date) VALUES (?, ?, ?)',
                (data['title'], data['description'], message.text)
            )
            conn.commit()
            await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=admin_keyboard())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î")
            return
    await state.finish()

@dp.message_handler(lambda message: message.text == "üë• –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
async def add_contact_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:")
        await AdminStates.waiting_for_contact_department.set()

@dp.message_handler(state=AdminStates.waiting_for_contact_department)
async def process_contact_department(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    async with state.proxy() as data:
        data['department'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await AdminStates.waiting_for_contact_name.set()

@dp.message_handler(state=AdminStates.waiting_for_contact_name)
async def process_contact_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await AdminStates.waiting_for_contact_phone.set()

@dp.message_handler(state=AdminStates.waiting_for_contact_phone)
async def process_contact_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    async with state.proxy() as data:
        data['phone'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await AdminStates.waiting_for_contact_email.set()

@dp.message_handler(state=AdminStates.waiting_for_contact_email)
async def process_contact_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    async with state.proxy() as data:
        cursor.execute(
            'INSERT INTO contacts (department, name, phone, email) VALUES (?, ?, ?, ?)',
            (data['department'], data['name'], data['phone'], message.text)
        )
        conn.commit()
    
    await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_keyboard())
    await state.finish()

@dp.message_handler(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏")
async def delete_menu(message: types.Message):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=delete_keyboard())

@dp.message_handler(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())

@dp.message_handler(lambda message: message.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def back_to_user_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"""
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
async def delete_news(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if message.from_user.id in ADMIN_IDS:
        cursor.execute('SELECT id, title, date FROM news ORDER BY date DESC')
        news = cursor.fetchall()
        if news:
            keyboard = types.InlineKeyboardMarkup()
            for news_id, title, date in news:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{date}: {title}",
                    callback_data=f"del_news_{news_id}"
                ))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def delete_schedule(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if message.from_user.id in ADMIN_IDS:
        cursor.execute('SELECT id, group_name, day FROM schedule ORDER BY group_name, day')
        schedules = cursor.fetchall()
        if schedules:
            keyboard = types.InlineKeyboardMarkup()
            for schedule_id, group, day in schedules:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{group} - {day}",
                    callback_data=f"del_schedule_{schedule_id}"
                ))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def delete_event(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    if message.from_user.id in ADMIN_IDS:
        cursor.execute('SELECT id, title, date FROM events ORDER BY date DESC')
        events = cursor.fetchall()
        if events:
            keyboard = types.InlineKeyboardMarkup()
            for event_id, title, date in events:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{date}: {title}",
                    callback_data=f"del_event_{event_id}"
                ))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
async def delete_contact(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    if message.from_user.id in ADMIN_IDS:
        cursor.execute('SELECT id, department, name FROM contacts ORDER BY department')
        contacts = cursor.fetchall()
        if contacts:
            keyboard = types.InlineKeyboardMarkup()
            for contact_id, department, name in contacts:
                keyboard.add(types.InlineKeyboardButton(
                    text=f"{department}: {name}",
                    callback_data=f"del_contact_{contact_id}"
                ))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del_news_'))
async def process_delete_news(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
    news_id = int(callback_query.data.split('_')[2])
    cursor.execute('DELETE FROM news WHERE id = ?', (news_id,))
    conn.commit()
    await callback_query.answer("–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
    await callback_query.message.edit_text("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del_schedule_'))
async def process_delete_schedule(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    schedule_id = int(callback_query.data.split('_')[2])
    cursor.execute('DELETE FROM schedule WHERE id = ?', (schedule_id,))
    conn.commit()
    await callback_query.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await callback_query.message.edit_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del_event_'))
async def process_delete_event(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback_query.data.split('_')[2])
    cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
    conn.commit()
    await callback_query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await callback_query.message.edit_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('del_contact_'))
async def process_delete_contact(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact_id = int(callback_query.data.split('_')[2])
    cursor.execute('DELETE FROM contacts WHERE id = ?', (contact_id,))
    conn.commit()
    await callback_query.answer("–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω!")
    await callback_query.message.edit_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS news (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            date TEXT NOT NULL,
            image_url TEXT
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_name TEXT NOT NULL,
            day TEXT NOT NULL,
            lessons TEXT NOT NULL
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            date TEXT NOT NULL
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS contacts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            department TEXT NOT NULL,
            name TEXT NOT NULL,
            phone TEXT NOT NULL,
            email TEXT NOT NULL
        )
        ''')

        cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT NOT NULL,
            text TEXT NOT NULL,
            date TEXT NOT NULL
        )
        ''')
        
        conn.commit()
        logging.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

if __name__ == '__main__':
    from aiogram import executor
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    create_tables()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        init_database()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
